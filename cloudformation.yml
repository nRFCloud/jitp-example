# Adapted from https://raw.githubusercontent.com/aws-samples/aws-iot-jitp-sample-scripts/master/etc/cloudformation.yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Resources for Just-In-Time Provisioning (JITP)

Resources:
  IoTProvisioningRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: IoTJITProvisioning
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service: "iot.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSIoTThingsRegistration
        - arn:aws:iam::aws:policy/service-role/AWSIoTLogging
        - arn:aws:iam::aws:policy/service-role/AWSIoTRuleActions
  JITPIoTConnectPolicy:
    Type: "AWS::IoT::Policy"
    Properties:
      PolicyName: JITPIoTConnectPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Sid: MQTTConnect
            Action:
              - "iot:Connect"
            Effect: Allow
            # Require the MQTT client id to match the device id stored in the CommonName (CN) field of the cert.
            # For more on this see comments in scripts/connect-and-publish.js.
            Resource: "arn:aws:iot:*:*:client/${iot:Certificate.Subject.CommonName}"
  # The resources from here down are only needed if you want to use a custom ThingType or ThingGroup when provisioning your device. 
  # The custom ThingType is what we put in the device cert's OU subject field. The custom ThingGroup is what we put in the device 
  # cert's dnQualifier field.
  WriteToIotPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows writing to IoT
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - "iot:*"
          Resource: "*"
  WriteToCloudWatchLogsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows writing to CloudWatch Logs
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: "arn:aws:logs:*:*:*"
  MyJITPTestThingGroup:
    Type: Custom::ThingGroup
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt ManageThingGroupsLambda.Arn
      thingGroupName: !Sub "${AWS::StackName}-MyJITPTestThingGroup"
      thingGroupProperties:
        thingGroupDescription: JITP test devices
  AssociatedThingGroup:
    Type: Custom::ThingGroup
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt ManageThingGroupsLambda.Arn
      thingGroupName: !Sub "${AWS::StackName}-AssociatedThingGroup"
      thingGroupProperties:
        thingGroupDescription: Associated devices
      policyName: !Ref AssociatedThingGroupPolicy 
  AssociatedThingGroupPolicy:
    Type: "AWS::IoT::Policy"
    Properties:
      PolicyName: AssociatedThingGroupPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Action:
              - "iot:Subscribe"
            Effect: Allow
            Resource:
              - "arn:aws:iot:*:*:topicfilter/$aws/things/${iot:ClientId}/shadow/get/accepted"
              - "arn:aws:iot:*:*:topicfilter/$aws/things/${iot:ClientId}/shadow/update/accepted"
              - "arn:aws:iot:*:*:topicfilter/$aws/things/${iot:ClientId}/shadow/update/delta"
              - "arn:aws:iot:*:*:topicfilter/${iot:Connection.Thing.Attributes[stage]}/${iot:Connection.Thing.Attributes[tenantId]}/m/*"
          - 
            Action: 
              - "iot:Publish"
            Effect: "Allow"
            Resource:
              - "arn:aws:iot:*:*:topic/$aws/things/${iot:ClientId}/shadow/get"
              - "arn:aws:iot:*:*:topic/$aws/things/${iot:ClientId}/shadow/update"
              - "arn:aws:iot:*:*:topic/${iot:Connection.Thing.Attributes[stage]}/${iot:Connection.Thing.Attributes[tenantId]}/m/*"
          -
            Action: 
              - "iot:Receive"
            Effect: "Allow"
            Resource: "*"
  ManageThingGroupsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Manages the IoT Thing Groups through custom CloudFormation resources
      Code:
        ZipFile: >
          const { Iot } = require("aws-sdk"); 
          const response = require("cfn-response"); 
          const util = require("util"); 
          const sendAsync = util.promisify(response.send); 
          const iot = new Iot();

          exports.handler = async (event, context) => {
            const {
              RequestType,
              ResourceProperties: { thingGroupName, thingGroupProperties, policyName }
            } = event;
            console.log(event, thingGroupName, thingGroupProperties, policyName);
            try {
              switch (RequestType) {
                case "Create":
                  const { thingGroupArn } = await iot
                    .createThingGroup({ thingGroupName, thingGroupProperties })
                    .promise();
                  if (policyName) {
                    console.log(
                      `Attaching policy '${policyName}' to thingGroupARN '${thingGroupArn}'.`
                    );
                    await iot
                      .attachPolicy({ policyName, target: thingGroupArn })
                      .promise();
                  }
                  break;
                case "Delete":
                  const { things } = await iot
                    .listThingsInThingGroup({ thingGroupName })
                    .promise();

                  for (const thingName of things) {
                    const { principals } = await iot
                      .listThingPrincipals({ thingName })
                      .promise();

                    if (principals) {
                      for (const certARN of principals) {
                        const certificateId = certARN.split("/")[1];
                        const { policies } = await iot
                          .listAttachedPolicies({ target: certARN })
                          .promise();
                        if (policies) {
                          for (const policy of policies) {
                            const policyName = policy.policyName || "";
                            await iot
                              .detachPolicy({ policyName, target: certARN })
                              .promise();
                          }
                          await iot
                            .detachThingPrincipal({ thingName, principal: certARN })
                            .promise();
                          await iot
                            .updateCertificate({ certificateId, newStatus: "INACTIVE" })
                            .promise();
                          await iot.deleteCertificate({ certificateId }).promise();
                        }
                      }

                      await iot.deleteThing({ thingName }).promise();
                    }
                  }

                  await iot.deleteThingGroup({ thingGroupName }).promise();
                  break;
              }

              await sendAsync(
                event,
                context,
                response.SUCCESS,
                { thingGroupName },
                thingGroupName,
                false                
              );
            } catch (err) {
              if (err.code === "ResourceNotFoundException") {
                await sendAsync(
                  event,
                  context,
                  response.SUCCESS,
                  { thingGroupName },
                  thingGroupName,
                  false
                );
              } else {
                await sendAsync(
                  event,
                  context,
                  response.FAILED,
                  { Error: `${err.message}  (${err})` },
                  thingGroupName,
                  false
                );                
              }
            }
          };
      Handler: index.handler
      Runtime: nodejs8.10
      Timeout: 300
      Role: !GetAtt ManageThingGroupsLambdaRole.Arn
  ManageThingGroupsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows managing ThingGroups
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iot:CreateThingGroup
          - iot:DeleteThingGroup
          Resource: "*"
  ManageThingGroupsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - !Ref ManageThingGroupsPolicy
      - !Ref WriteToCloudWatchLogsPolicy
      - !Ref WriteToIotPolicy                       
Parameters:
  Stage:
    Description: environment specifier
    Type: String
    AllowedValues:
    - dev
    - beta
    - prod
    ConstraintDescription: must specify "dev", "beta", or "prod"
Outputs:
  IoTProvisioningRole:
    Description: the ARN of the IAM role that allows IoT provisioning
    Value: !GetAtt IoTProvisioningRole.Arn 
    Export:
      Name: !Sub "${AWS::StackName}-IoTProvisioningRole"
  MyJITPTestThingGroup:
    Description: The name of the thing group for JITP devices
    Value: !GetAtt MyJITPTestThingGroup.thingGroupName
    Export:
      Name: !Sub "${AWS::StackName}-MyJITPTestThingGroup"
  JITPIoTConnectPolicy:
    Description: the IoT policy attached to the device cert during JITP
    Value: !Ref JITPIoTConnectPolicy
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-JITPIoTConnectPolicy"            
  AssociatedThingGroup:
    Description: The name of the thing group for associated devices
    Value: !GetAtt AssociatedThingGroup.thingGroupName
    Export:
      Name: !Sub "${AWS::StackName}-AssociatedThingGroup"      