# Adapted from https://raw.githubusercontent.com/aws-samples/aws-iot-jitp-sample-scripts/master/etc/cloudformation.yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Resources for Just-In-Time Provisioning (JITP)

Resources:
  IoTProvisioningRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: IoTJITProvisioning
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service: "iot.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSIoTThingsRegistration
        - arn:aws:iam::aws:policy/service-role/AWSIoTLogging
        - arn:aws:iam::aws:policy/service-role/AWSIoTRuleActions
  JITPIoTAccess:
    Type: "AWS::IoT::Policy"
    Properties:
      PolicyName: JITPIoTAccess
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Sid: MQTTConnect
            Action:
              - "iot:Connect"
            Effect: Allow
            Resource: "*"
          -
            Sid: MQTTRead
            Action:
              - "iot:Subscribe"
              - "iot:Receive"
            Effect: Allow
            Resource: "*"
          - 
            Sid: MQTTWrite
            Action:
              - "iot:Publish"
            Effect: Allow
            Resource: { "Fn::Join" : [ "", ["arn:aws:iot:",{ "Fn::Sub": "${AWS::Region}" },":", { "Fn::Sub": "${AWS::AccountId}" }, ":topic/${iot:Certificate.Subject.CommonName}"]] }
          -
            Sid: ShadowUpdate
            Action:
              - "iot:UpdateThingShadow"
            Effect: Allow
            Resource: { "Fn::Join" : [ "", ["arn:aws:iot:",{ "Fn::Sub": "${AWS::Region}" },":", { "Fn::Sub": "${AWS::AccountId}" }, ":$aws/things/${iot:Certificate.Subject.CommonName}/shadow/update"]] }
  # The resources from here down are only needed if you want to use a custom ThingType when provisioning your device. 
  # The custom ThingType is what we put in the device cert's OU subject field.
  WriteToIotPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows writing to IoT
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - "iot:*"
          Resource: "*"
  WriteToCloudWatchLogsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows writing to CloudWatch Logs
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: "arn:aws:logs:*:*:*"
  ManageThingTypesPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows managing ThingTypes
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iot:CreateThingType
          - iot:DeleteThingType
          Resource: "*"  
  JITPThingType:
    Type: Custom::ThingType
    Version: 1.0  
    Properties:
      ServiceToken: !GetAtt CreateThingType.Arn
      thingTypeName: !Sub "${AWS::StackName}-demo"
      thingTypeProperties:
        thingTypeDescription: JITP devices
        searchableAttributes:
        - tenantId
        - stage
        - blocked
  CreateThingType:
    Type: AWS::Lambda::Function
    Properties:
      Description: Manages the IoT Thing Groups through custom CloudFormation resources
      Code:
        ZipFile: >
          const { Iot } = require('aws-sdk');
          const response = require('cfn-response');
          const iot = new Iot();
          exports.handler = (event, context) => {
            const { RequestType, ResourceProperties: { thingTypeName, thingTypeProperties } } = event;
            let p = Promise.resolve();
            switch (RequestType) {
              case 'Create':
                p = iot.createThingType({thingTypeName, thingTypeProperties}).promise()
                break
              case 'Delete':
                p = iot
                    .deprecateThingType({
                      thingTypeName,
                    })
                    .promise()
                break
            }
            p.then(() => {
              response.send(event, context, response.SUCCESS, { thingTypeName }, false, thingTypeName);
            })
            .catch(err => {
              response.send(event, context, response.FAILED, { Error: `${err.message}  (${err})` })
            })
          };
      Handler: index.handler
      Runtime: nodejs8.10
      Timeout: 60
      Role: !GetAtt CreateThingTypeRole.Arn
  CreateThingTypeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - !Ref ManageThingTypesPolicy
      - !Ref WriteToCloudWatchLogsPolicy
      - !Ref WriteToIotPolicy
  # The resources from here down are only needed if you want to use a custom ThingGroup when provisioning your device. 
  # The custom ThingGroup is what we put in the device cert's dnQualifier subject field.
  JITPThingGroup:
    Type: Custom::ThingGroup
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt CreateThingGroup.Arn
      thingGroupName: !Sub "${AWS::StackName}"
      thingGroupProperties:
        thingGroupDescription: JITP devices
      policyName: !Ref JITPThingGroupPolicy 
  JITPThingGroupPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iot:Connect
          Resource:
          - arn:aws:iot:*:*:client/${iot:ClientId}
          Condition:
            Bool:
              iot:Connection.Thing.IsAttached:
              - 'true'
            StringNotEquals:
              iot:Connection.Thing.Attributes[blocked]:
              - '1'
        - Effect: Allow
          Action:
          - iot:Receive
          Resource:
          - "*"
        - Effect: Allow
          Action:
          - iot:UpdateThingShadow
          - iot:GetThingShadow
          Resource:
          - arn:aws:iot:*:*:thing/${iot:ClientId}
        - Effect: Allow
          Action:
          - iot:Subscribe
          Resource:
          - !Sub "arn:aws:iot:*:*:topicfilter/${Stage}/${!iot:Connection.Thing.Attributes[tenantId]}/m/*"
          - arn:aws:iot:*:*:topicfilter/$aws/things/${iot:ClientId}/shadow/get/*
          - arn:aws:iot:*:*:topicfilter/$aws/things/${iot:ClientId}/shadow/update/*
        - Effect: Allow
          Action:
          - iot:Publish
          Resource:
          - !Sub "arn:aws:iot:*:*:topic/${Stage}/${!iot:Connection.Thing.Attributes[tenantId]}/m/*"
          - arn:aws:iot:*:*:topic/$aws/things/${iot:ClientId}/shadow/get
          - arn:aws:iot:*:*:topic/$aws/things/${iot:ClientId}/shadow/update
  CreateThingGroup:
    Type: AWS::Lambda::Function
    Properties:
      Description: Manages the IoT Thing Groups through custom CloudFormation resources
      Code:
        ZipFile: >
          const { Iot } = require('aws-sdk');
          const response = require('cfn-response');
          const iot = new Iot();
          exports.handler = (event, context) => {
            const { RequestType, ResourceProperties: { thingGroupName, thingGroupProperties, policyName } } = event;
            let p = Promise.resolve();
            switch (RequestType) {
              case 'Create':
                p = iot.createThingGroup({thingGroupName, thingGroupProperties}).promise()
                  .then(({thingGroupArn}) => iot.attachPolicy({policyName, target: thingGroupArn}).promise())
                break
              case 'Delete':
                // Delete all Things in Group
                p = iot
                    .listThingsInThingGroup({
                      thingGroupName,
                    })
                    .promise()
                    .then(({ things }) => Promise.all(things.map(thingName => iot
                      .listThingPrincipals({ thingName })
                      .promise()
                      .then(({principals}) => Promise.all(principals.map(principal => iot
                        .detachThingPrincipal({
                          thingName,
                          principal,
                        })
                        .promise()
                        .then(() => {
                          const certificateId = principal.split('/')[1];
                          return iot
                            .updateCertificate({
                              certificateId,
                              newStatus: 'INACTIVE',
                            })
                            .promise()
                            .then(() => iot.deleteCertificate({ certificateId }).promise())
                        })
                      )))
                      .then(() => iot.deleteThing({ thingName }).promise())
                    )))
                    .then(() => iot.deleteThingGroup({thingGroupName}).promise())
                break
            }
            p.then(() => {
              response.send(event, context, response.SUCCESS, { thingGroupName }, false, thingGroupName);
            })
            .catch(err => {
              if(err.code === 'ResourceNotFoundException') {
                response.send(event, context, response.SUCCESS, { thingGroupName }, false, thingGroupName);
              } else {
                response.send(event, context, response.FAILED, { Error: `${err.message}  (${err})` })
              }
            })
          };
      Handler: index.handler
      Runtime: nodejs8.10
      Timeout: 300
      Role: !GetAtt CreateThingGroupRole.Arn
  ManageThingGroupsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows managing ThingGroups
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iot:CreateThingGroup
          - iot:DeleteThingGroup
          Resource: "*"
  CreateThingGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - !Ref ManageThingGroupsPolicy
      - !Ref WriteToCloudWatchLogsPolicy
      - !Ref WriteToIotPolicy                       
Parameters:
  Stage:
    Description: environment specifier
    Type: String
    AllowedValues:
    - dev
    - beta
    - prod
    ConstraintDescription: must specify "dev", "beta", or "prod"
Outputs:
  IoTProvisioningRole:
    Description: the IAM role that allows IoT provisioning
    Value: !GetAtt IoTProvisioningRole.Arn 
    Export:
      Name: IoTProvisioningRole  
  JITPThingType:
    Description: The name of the thing type for JITP devices
    Value: !GetAtt JITPThingType.thingTypeName
    Export:
      Name: !Sub "${AWS::StackName}-CustomThingType"
  JITPThingGroup:
    Description: The name of the thing type for JITP devices
    Value: !GetAtt JITPThingGroup.thingGroupName
    Export:
      Name: !Sub "${AWS::StackName}-CustomThingGroup"      